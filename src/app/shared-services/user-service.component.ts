/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.3.1.0 (NJsonSchema v9.14.1.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export interface IUserService {
    /**
     * @param input (optional) 
     * @return Success
     */
    register(input: UserRegisterInputDto | null | undefined): Promise<void>;
    /**
     * @return Success
     */
    getUsers(): Promise<UserOutputDto[]>;
    /**
     * @return Success
     */
    getDrivers(): Promise<UserOutputDto[]>;
}

export class UserService implements IUserService {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:7000";
    }

    /**
     * @param input (optional) 
     * @return Success
     */
    register(input: UserRegisterInputDto | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Users/Register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json", 
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRegister(_response);
        });
    }

    protected processRegister(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    getUsers(): Promise<UserOutputDto[]> {
        let url_ = this.baseUrl + "/users/GetUsers";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetUsers(_response);
        });
    }

    protected processGetUsers(response: Response): Promise<UserOutputDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(UserOutputDto.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UserOutputDto[]>(<any>null);
    }

    /**
     * @return Success
     */
    getDrivers(): Promise<UserOutputDto[]> {
        let url_ = this.baseUrl + "/users/GetDrivers";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetDrivers(_response);
        });
    }

    protected processGetDrivers(response: Response): Promise<UserOutputDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(UserOutputDto.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UserOutputDto[]>(<any>null);
    }
}

export class UserRegisterInputDto implements IUserRegisterInputDto {
    userName?: string | undefined;
    emailAddress?: string | undefined;
    password?: string | undefined;
    age?: number | undefined;
    vehicleNumber?: string | undefined;

    constructor(data?: IUserRegisterInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userName = data["userName"];
            this.emailAddress = data["emailAddress"];
            this.password = data["password"];
            this.age = data["age"];
            this.vehicleNumber = data["vehicleNumber"];
        }
    }

    static fromJS(data: any): UserRegisterInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserRegisterInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["emailAddress"] = this.emailAddress;
        data["password"] = this.password;
        data["age"] = this.age;
        data["vehicleNumber"] = this.vehicleNumber;
        return data; 
    }
}

export interface IUserRegisterInputDto {
    userName?: string | undefined;
    emailAddress?: string | undefined;
    password?: string | undefined;
    age?: number | undefined;
    vehicleNumber?: string | undefined;
}

export class UserOutputDto implements IUserOutputDto {
    id?: string | undefined;
    userName?: string | undefined;
    emailAddress?: string | undefined;
    age?: number | undefined;
    vehicleNumber?: string | undefined;

    constructor(data?: IUserOutputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.userName = data["userName"];
            this.emailAddress = data["emailAddress"];
            this.age = data["age"];
            this.vehicleNumber = data["vehicleNumber"];
        }
    }

    static fromJS(data: any): UserOutputDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserOutputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userName"] = this.userName;
        data["emailAddress"] = this.emailAddress;
        data["age"] = this.age;
        data["vehicleNumber"] = this.vehicleNumber;
        return data; 
    }
}

export interface IUserOutputDto {
    id?: string | undefined;
    userName?: string | undefined;
    emailAddress?: string | undefined;
    age?: number | undefined;
    vehicleNumber?: string | undefined;
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if(result !== null && result !== undefined)
        throw result;
    else
        throw new SwaggerException(message, status, response, headers, null);
}