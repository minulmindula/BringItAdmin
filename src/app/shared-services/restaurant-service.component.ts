/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.2.3.0 (NJsonSchema v9.13.35.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IRestaurantService {
    /**
     * @param input (optional) 
     * @return Success
     */
    insertMenu(input: MenuInputDto | null | undefined): Observable<void>;
    /**
     * @param id (optional) 
     * @return Success
     */
    getByRestaurantId(id: number | null | undefined): Observable<MenuOutputDto>;
    /**
     * @param input (optional) 
     * @return Success
     */
    insertRestaurant(input: RestaurantInputDto | null | undefined): Observable<void>;
    /**
     * @return Success
     */
    getRestaurant(): Observable<RestaurantOutputDto[]>;
    /**
     * @param id (optional) 
     * @return Success
     */
    deleteRestaurant(id: number | null | undefined): Observable<void>;
}

@Injectable()
export class RestaurantService implements IRestaurantService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:7000";
    }

    /**
     * @param input (optional) 
     * @return Success
     */
    insertMenu(input: MenuInputDto | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/restaurants/CreateMenu";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processInsertMenu(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processInsertMenu(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processInsertMenu(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    getByRestaurantId(id: number | null | undefined): Observable<MenuOutputDto> {
        let url_ = this.baseUrl + "/restaurants/GetByRestaurantId?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetByRestaurantId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetByRestaurantId(<any>response_);
                } catch (e) {
                    return <Observable<MenuOutputDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<MenuOutputDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetByRestaurantId(response: HttpResponseBase): Observable<MenuOutputDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? MenuOutputDto.fromJS(resultData200) : new MenuOutputDto();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<MenuOutputDto>(<any>null);
    }

    /**
     * @param input (optional) 
     * @return Success
     */
    insertRestaurant(input: RestaurantInputDto | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/restaurants/CreateRestaurant";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processInsertRestaurant(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processInsertRestaurant(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processInsertRestaurant(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @return Success
     */
    getRestaurant(): Observable<RestaurantOutputDto[]> {
        let url_ = this.baseUrl + "/restaurants/GetRestaurants";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRestaurant(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRestaurant(<any>response_);
                } catch (e) {
                    return <Observable<RestaurantOutputDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<RestaurantOutputDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetRestaurant(response: HttpResponseBase): Observable<RestaurantOutputDto[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(RestaurantOutputDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RestaurantOutputDto[]>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    deleteRestaurant(id: number | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/restaurants/DeleteRestaurant?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteRestaurant(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteRestaurant(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteRestaurant(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

export class MenuInputDto implements IMenuInputDto {
    restaurantId?: number | undefined;
    list?: MenuList[] | undefined;

    constructor(data?: IMenuInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.restaurantId = data["restaurantId"];
            if (data["list"] && data["list"].constructor === Array) {
                this.list = [] as any;
                for (let item of data["list"])
                    this.list!.push(MenuList.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MenuInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new MenuInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["restaurantId"] = this.restaurantId;
        if (this.list && this.list.constructor === Array) {
            data["list"] = [];
            for (let item of this.list)
                data["list"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IMenuInputDto {
    restaurantId?: number | undefined;
    list?: MenuList[] | undefined;
}

export class MenuList implements IMenuList {
    type?: string | undefined;
    displayName?: string | undefined;
    price?: string | undefined;

    constructor(data?: IMenuList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.type = data["type"];
            this.displayName = data["displayName"];
            this.price = data["price"];
        }
    }

    static fromJS(data: any): MenuList {
        data = typeof data === 'object' ? data : {};
        let result = new MenuList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["displayName"] = this.displayName;
        data["price"] = this.price;
        return data; 
    }
}

export interface IMenuList {
    type?: string | undefined;
    displayName?: string | undefined;
    price?: string | undefined;
}

export class MenuOutputDto implements IMenuOutputDto {
    id?: string | undefined;
    restaurantId?: number | undefined;
    list?: MenuList[] | undefined;

    constructor(data?: IMenuOutputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.restaurantId = data["restaurantId"];
            if (data["list"] && data["list"].constructor === Array) {
                this.list = [] as any;
                for (let item of data["list"])
                    this.list!.push(MenuList.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MenuOutputDto {
        data = typeof data === 'object' ? data : {};
        let result = new MenuOutputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["restaurantId"] = this.restaurantId;
        if (this.list && this.list.constructor === Array) {
            data["list"] = [];
            for (let item of this.list)
                data["list"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IMenuOutputDto {
    id?: string | undefined;
    restaurantId?: number | undefined;
    list?: MenuList[] | undefined;
}

export class RestaurantInputDto implements IRestaurantInputDto {
    latitutde?: number | undefined;
    longitude?: number | undefined;
    displayName?: string | undefined;
    city?: string | undefined;

    constructor(data?: IRestaurantInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.latitutde = data["latitutde"];
            this.longitude = data["longitude"];
            this.displayName = data["displayName"];
            this.city = data["city"];
        }
    }

    static fromJS(data: any): RestaurantInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new RestaurantInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["latitutde"] = this.latitutde;
        data["longitude"] = this.longitude;
        data["displayName"] = this.displayName;
        data["city"] = this.city;
        return data; 
    }
}

export interface IRestaurantInputDto {
    latitutde?: number | undefined;
    longitude?: number | undefined;
    displayName?: string | undefined;
    city?: string | undefined;
}

export class RestaurantOutputDto implements IRestaurantOutputDto {
    id?: number | undefined;
    latitutde?: number | undefined;
    longitude?: number | undefined;
    displayName?: string | undefined;
    city?: string | undefined;

    constructor(data?: IRestaurantOutputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.latitutde = data["latitutde"];
            this.longitude = data["longitude"];
            this.displayName = data["displayName"];
            this.city = data["city"];
        }
    }

    static fromJS(data: any): RestaurantOutputDto {
        data = typeof data === 'object' ? data : {};
        let result = new RestaurantOutputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["latitutde"] = this.latitutde;
        data["longitude"] = this.longitude;
        data["displayName"] = this.displayName;
        data["city"] = this.city;
        return data; 
    }
}

export interface IRestaurantOutputDto {
    id?: number | undefined;
    latitutde?: number | undefined;
    longitude?: number | undefined;
    displayName?: string | undefined;
    city?: string | undefined;
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if(result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = event => { 
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob); 
        }
    });
}